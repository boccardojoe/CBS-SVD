# Required libraries
library(readxl)
library(tidyverse)
library(dplyr)
library(BiocManager)
BiocManager::install("biomaRt")
library(biomaRt)
library(reshape2)
library(ggplot2)
library(ggpubr)
library(rstatix)


# Data available at
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE221615 
# file name "GSE221615_normalizedCounts.tsv.gz" for transcripts and
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE220622 
# file name "GSE220622_processed_M-value.tsv.gz" for the methylations

# Data Import for Transcripts
GSE221615_normalizedCounts = read_delim("C:/*Path*/GSE221615_normalizedCounts.tsv/GSE221615_normalizedCounts.tsv", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE)

# Import additional gene information, combine with trascript data, and select chromosome 1
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl",host="useast.ensembl.org")
chr_genes = getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position'),filters =
'chromosome_name', values = c(1:23, "X", "Y"), mart = ensembl)
Gene_chr = merge(chr_genes,GSE221615_normalizedCounts,by="ens_gene")
Gene_chr_1 = subset(Gene_chr, chromosome_name=="1")

# Filter transcripts for complete cases
Gene_chr_1_c = Gene_chr_1 %>%
   filter(complete.cases(.))
Gene_chr_1_c_pos = Gene_chr_1_c[,c(1,2,3,4)]
Gene_chr_1_c_data = Gene_chr_1_c[,-c(2,3,4,5)]

# Data Import for Methylation
GSE220622_processed_M_value = as.data.frame(read_delim("C:/*Path*/GSE220622_processed_M-value.tsv/GSE220622_processed_M-value.tsv", 
    delim = "\t", escape_double = FALSE, 
    trim_ws = TRUE))
GSE220622_processed_M_value = GSE220622_processed_M_value[,-c(seq(3,783,2))]
Methyl_sites = as.data.frame(GSE220622_processed_M_value$ID_REF)

# Attach additional methylation site information to data
# Additional methylation site information found at 
# https://support.illumina.com/downloads/infinium-methylationepic-v1-0-product-files.html
# Note: Remove unnecessary header info from file first ("clean" version)
infinium_methylationepic_v1.0_b5 = as.data.frame(read_csv("C:/*Path*/infinium-methylationepic-v-1-0-b5-manifest-file-csv/infinium-methylationepic-v-1-0-b5-manifest-file_clean.txt"))
Illumin_Methyl_Chr_v1 = as.data.frame(infinium_methylationepic_v1.0_b5[,c(2,12,19,50,51)])
colnames(Illumin_Methyl_Chr_v1)[1] = "ID_REF"
Split_chr = strsplit(Illumin_Methyl_Chr_v1$UCSC_CpG_Islands_Name, split = ":")
Split_start_end = c()
for (i in 1:866554) {
  Split_start_end[i] = Split_chr[[i]][2]
}
Split_start_and_end = strsplit(Split_start_end, split = "-")
CpG_start = c()
for (i in 1:866554) {
  CpG_start[i] = Split_start_and_end[[i]][1]
}
CpG_end = c()
for (i in 1:866554) {
  CpG_end[i] = Split_start_and_end[[i]][2]
}
Illumin_Methyl_Chr_v1_new = Illumin_Methyl_Chr_v1
Illumin_Methyl_Chr_v1_new$CpG_start = CpG_start
Illumin_Methyl_Chr_v1_new$CpG_end = CpG_end
Illumin_Methyl_Chr_v1_new = Illumin_Methyl_Chr_v1_new[,-c(3,4,5)]
Methyl_chr_v1 = merge(Illumin_Methyl_Chr_v1_new,GSE220622_processed_M_value,by="ID_REF")
Methyl_chr_1_v1 = subset(Methyl_chr_v1, CHR=="1")
Methyl_chr_1_v1_c = Methyl_chr_1_v1

# Filter methylations for complete cases
Methyl_chr_1_v1_c = Methyl_chr_1_v1_c %>%
   filter(complete.cases(.))
head(Methyl_chr_1_v1_c)
Methyl_chr_1_v1_c_pos = Methyl_chr_1_v1_c[,c(1,2,3,4)]
Methyl_chr_1_v1_c_data = Methyl_chr_1_v1_c[,-c(2,3,4)]

# Distance Matrix Functions
bp_dist_matrix_mean_fun2 = function(SM, pos_M, pos_T){
  sel_pos_T = pos_T[pos_T$ens_gene %in% colnames(SM),]
  sel_pos_M = pos_M[pos_M$ID_REF %in% rownames(SM),]
  loc_diff = matrix(NA,length(sel_pos_M$ID_REF), length(sel_pos_T$ens_gene) )
  for (i in 1:length(sel_pos_M$ID_REF)) {
    for (j in 1:length(sel_pos_T$ens_gene)) {
      loc_diff[i,j] = min(abs(sel_pos_M$CpG_start[i] - sel_pos_T$start_position[j]),abs(sel_pos_M$CpG_start[i] - sel_pos_T$end_position[j]),abs(sel_pos_M$CpG_end[i] - sel_pos_T$start_position[j]),abs(sel_pos_M$CpG_end[i] - sel_pos_T$end_position[j])) 
    }
    
  }
  sub_mat_mean = mean(loc_diff)
  sub_mat_median = median(loc_diff)
  sub_mat_var = var(as.vector(loc_diff))
  return(list(sub_mat_mean,sub_mat_median,sub_mat_var,loc_diff))
}

# Correlation Matrix
Corr_chr_1_tran_methyl = cor(t(Methyl_chr_1_v1_c_data),t(Gene_chr_1_c_data), method = "pearson")


# SVD of Correlation Matrix
SVD_Corr_chr_1_tran_methyl = svd(Corr_chr_1_tran_methyl)

##################################################################################
# Example Code to run a MC resampling
# Note: Default here is B = 10,000 resamples, G = 10 is the transcript cardinality
# and M = 100 in the methylation cardinality
# G and M may be replaced for any desired cardinalities
##################################################################################

B = 1000
G = 10
M = 100
MC_10_100_data2 = matrix(NA, B, 4) 
  
CBS_SVD_R_results = CBS_SVD_R(Corr_chr_1_tran_methyl, rank = 1,ku = M, kv = G, epsilon=.05 )
sub_rows = as.vector(CBS_SVD_R_results$U.selected[[1]])
sub_row_names = rownames(Corr_chr_1_tran_methyl)[sub_rows]
sub_cols = as.vector(CBS_SVD_R_results$V.selected[[1]])
sub_col_names = colnames(Corr_chr_1_tran_methyl)[sub_cols]
###Selected submatrix
Select_submat = Corbi::submatrix(Corr_chr_1_tran_methyl,sub_rows,sub_cols)
colnames(Select_submat) = sub_col_names
rownames(Select_submat) = sub_row_names
Select_mean_bp_dist = bp_dist_matrix_mean_fun2(Select_submat,Methyl_chr_1_v1_c_pos,Gene_chr_1_c_pos)

for (i in 1:B) {
###Random submatrix
rand_sub_rows = sample(seq(1,n_row,1),M,replace = FALSE)
rand_sub_row_names = rownames(Corr_chr_1_tran_methyl)[rand_sub_rows]
rand_sub_cols = sample(seq(1,n_col,1),G,replace = FALSE)
rand_sub_col_names = colnames(Corr_chr_1_tran_methyl)[rand_sub_cols]
rand_submat = Corbi::submatrix(Corr_chr_1_tran_methyl,rand_sub_rows,rand_sub_cols)
colnames(rand_submat) = rand_sub_col_names
rownames(rand_submat) = rand_sub_row_names
  
Rand_mean_bp_dist = bp_dist_matrix_mean_fun2(rand_submat,Methyl_chr_1_v1_c_pos,Gene_chr_1_c_pos)
  MC_10_100_data2[i,1] = Select_mean_bp_dist[[1]]
  MC_10_100_data2[i,2] = Rand_mean_bp_dist[[1]]
  MC_10_100_data2[i,3] = Select_mean_bp_dist[[2]]
  MC_10_100_data2[i,4] = Rand_mean_bp_dist[[2]]  
}
})

MC_10_100_data2 = as.data.frame(MC_10_100_data2)
colnames(MC_10_100_data2) = c("Select Mean", "Random Mean", "Select Median", "Random Median")
MC_10_100_data2$`S-R Mean` = MC_10_100_data2$`Select Mean` - MC_10_100_data2$`Random Mean`
MC_10_100_data2$`S-R Median` = MC_10_100_data2$`Select Median` - MC_10_100_data2$`Random Median`
MC_10_100_results2 = data.frame(MC_10_100_data2_diff_mean_avg = mean(MC_10_100_data2$`S-R Mean`),MC_10_100_data2_diff_mean_sd = sqrt(var(MC_10_100_data2$`S-R Mean`)), MC_10_100_data_diff2_median_avg = mean(MC_10_100_data2$`S-R Median`),MC_10_100_data2_diff_median_sd = sqrt(var(MC_10_100_data2$`S-R Median`)))
MC_10_100_results2

##############################################################################
# Production of Figure 4
# Note: Necessary to first produce all MC_?_?_data2 and MC_?_?_results2 wanted
##############################################################################
X = c("10 G, 100 DNAm","15 G, 150 DNAm","25 G, 250 DNAm","50 G, 500 DNAm","100 G, 1000 DNAm")
Xf = factor(X,levels = c("10 G, 100 DNAm","15 G, 150 DNAm","25 G, 250 DNAm","50 G, 500 DNAm","100 G, 1000 DNAm"))
Y2 = c(MC_10_100_results2[1]/1000000, MC_15_150_results2[1]/1000000, MC_25_250_results2[1]/1000000, MC_50_500_results2[1]/1000000, MC_100_1000_results2[1]/1000000)
Mean_diff_data4 = data.frame(list(Type = Xf, Mbp = c(Y2[[1]], Y2[[2]], Y2[[3]], Y2[[4]], Y2[[5]])))
Mean_diff_data4$LB = c(quantile(MC_10_100_data2[,5],probs = 0.025)/1000000, quantile(MC_15_150_data2[,5],probs = 0.025)/1000000, quantile(MC_25_250_data2[,5],probs = 0.025)/1000000, quantile(MC_50_500_data2[,5],probs = 0.025)/1000000, quantile(MC_100_1000_data2[,5],probs = 0.025)/1000000)
Mean_diff_data4$UB = c(quantile(MC_10_100_data2[,5],probs = 0.975)/1000000, quantile(MC_15_150_data2[,5],probs = 0.975)/1000000, quantile(MC_25_250_data2[,5],probs = 0.975)/1000000, quantile(MC_50_500_data2[,5],probs = 0.975)/1000000, quantile(MC_100_1000_data2[,5],probs = 0.975)/1000000)
Mean_diff_data4_plot.1 = ggplot(Mean_diff_data4,aes(x = Type,y = Mbp)) +
  geom_point()+
  geom_errorbar(aes(ymin=LB, ymax=UB), width=.2,
                 position=position_dodge(0.05)) +
  theme(axis.text.x=element_text(angle=-45,hjust=.2),axis.title.x = element_blank()) + 
  scale_y_continuous(n.breaks = 17)
 
Mean_diff_data4_plot.1

##############################################################################
# Production of Figure 5
# Note: Necessary to first produce all CBS_SVD_R_results_?
##############################################################################

# Create matrix from previous results
Sub_mat_6 = t(Corr_chr_1_tran_methyl)[c(CBS_SVD_R_results_1$V.selected[[1]],
setdiff(CBS_SVD_R_results_2$V.selected[[1]],CBS_SVD_R_results_1$V.selected[[1]]), 
setdiff(CBS_SVD_R_results_3$V.selected[[1]],CBS_SVD_R_results_2$V.selected[[1]]), 
setdiff(CBS_SVD_R_results_4$V.selected[[1]],CBS_SVD_R_results_3$V.selected[[1]]), 
setdiff(CBS_SVD_R_results_5$V.selected[[1]],CBS_SVD_R_results_4$V.selected[[1]])),
c(CBS_SVD_R_results_1$U.selected[[1]],setdiff(CBS_SVD_R_results_2$U.selected[[1]],
CBS_SVD_R_results_1$U.selected[[1]]), setdiff(CBS_SVD_R_results_3$U.selected[[1]],
CBS_SVD_R_results_2$U.selected[[1]]), setdiff(CBS_SVD_R_results_4$U.selected[[1]],
CBS_SVD_R_results_3$U.selected[[1]]), setdiff(CBS_SVD_R_results_5$U.selected[[1]],
CBS_SVD_R_results_4$U.selected[[1]]))]

Sub_mat_6_df = as.data.frame(Sub_mat_6)
Sub_mat_6_df = tibble::rownames_to_column(Sub_mat_6_df, "Gene")
Sub_mat_6_df_long = Sub_mat_6_df %>% pivot_longer(
    cols = `cg00261690`:`cg27583604`, 
    names_to = "Methyl",
    values_to = "value"
)

my.lines1 = data.frame(x=c(0,100), y=c(90,100), 
    xend=c(100,100), yend=c(90,90))
my.lines2 = data.frame(x=c(0,150), y=c(85,100), 
    xend=c(150,150), yend=c(85,85))
my.lines3 = data.frame(x=c(0,250), y=c(75,100), 
    xend=c(250,250), yend=c(75,75))
my.lines4 = data.frame(x=c(0,500), y=c(50,100), 
    xend=c(500,500), yend=c(50,50))
my.lines5 = data.frame(x=c(0,1000), y=c(0,100), 
    xend=c(1000,1000), yend=c(0,0))

ggplot(Sub_mat_6_df_long, aes(as.factor(Methyl),as.factor(Gene), group=Gene)) +
    geom_tile(aes(fill = value)) +
    scale_fill_gradient2(low="black",high="black",limits=c(-.75,.75)) +
    labs(x = "Methylations", y = "Genes") + 
    geom_segment(data=my.lines1, aes(x,y,xend=xend, yend=yend), size=1.5, inherit.aes=F) + 
    geom_segment(data=my.lines2, aes(x,y,xend=xend, yend=yend), size=1.5, inherit.aes=F) + 
    geom_segment(data=my.lines3, aes(x,y,xend=xend, yend=yend), size=1.5, inherit.aes=F) + 
    geom_segment(data=my.lines4, aes(x,y,xend=xend, yend=yend), size=1.5, inherit.aes=F) + 
    theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank())
