
CBS_SVD = function(S,SVDs=svd(S),ku,kv,epsilon=.05) {
  
  SVD = SVDs
  u1 = SVD$u[,1]
  v1 = SVD$v[,1]
  d1 = SVD$d[1]
  
  countU <- 0
  countV <- 0
  
  repeat {
    
    countU <- countU+1
    
    if(ku >= nrow(S))
    {
      u1=u1
      names(u1) = rownames(S)
      break
    }
    
    ProjU = S %*% t(S) %*% u1
    
    u1_star = as.vector((ProjU))
    
    sp = sort(abs(u1_star), decreasing = TRUE)
    pip_ = order(abs(u1_star), decreasing = TRUE)
    u1_tp1 = integer(length = nrow(X))
    
    u1_tp1[1:ku] = u1_tp1[1:ku] + sp[1:ku] - sp[ku+1]
    kup1 = sp[ku+1] 
    
    u1_tp1 = u1_tp1[order(pip_)]
    
    u1_tp1 = u1_tp1*sign(u1_star)/norm(u1_tp1, type = "2")
    
    converge_p = abs(t(u1_tp1) %*% u1)
    
    if (converge_p>(1-epsilon)) {
      u1 = u1_tp1
      names(u1) = rownames(X)
      break
    }
    u1 = u1_tp1
  }
  
  repeat {
    
    countV <- countV + 1
    if(kv >= ncol(S))
    {
      v1=v1
      names(v1) = colnames(S)
      break
    }

    ProjV = t(S) %*% S %*% v1
    
    v1_star = as.vector((ProjV))
  
    sq= sort(abs(v1_star), decreasing = TRUE)
    piq_ = order(abs(v1_star), decreasing = TRUE)
    v1_tp1 = integer(length = ncol(X))
    
    v1_tp1[1:kv] = v1_tp1[1:kv] + sq[1:kv]-sq[kv+1]
    kvp1 = sq[kv+1]
    
    v1_tp1 = v1_tp1[order(piq_)]
    
    v1_tp1 = v1_tp1*sign(v1_star)/norm(v1_tp1, type = "2")
    
    converge_q = abs(t(v1_tp1) %*% v1)
    
    if (converge_q>(1-epsilon)) {
      v1 = v1_tp1
      names(v1) = colnames(X)
      break
    }
    v1 = v1_tp1
  }
  
  return(list(u = u1, 
              v = v1, 
              d = d1, 
              U.selected = which(u1 != 0), 
              V.selected = which(v1 != 0),
              countU=countU,
              countV=countV,
              kup1=kup1,
              kvp1=kvp1,
              ku=ku,
              kv=kv))
}
